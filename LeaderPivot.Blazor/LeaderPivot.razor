@namespace LeaderPivot.Blazor
@using LeaderAnalytics.LeaderPivot 
@typeparam T
@inherits BaseComponent

<div class="@PivotStyle.Container">
    <table class="@PivotStyle.Table" height="1px" style="@PivotStyle.TableStyle"> @*1px height required to make control div expand to 100% height.*@
        @if (Matrix?.Rows?.Any() ?? false)
        {
            @foreach (var row in Matrix.Rows.Select((x, y) => new { Item = x, Index = y }))
            {
                <Tr>
                @foreach (var c in row.Item.Cells.Select((x, y) => new { Item = x, Index = y }))
                {
                    switch (c.Item.CellType)
                    {
                        case CellType.Measure:
                            <MeasureCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</MeasureCell> break;
                        case CellType.Total:
                            <TotalCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</TotalCell> break;
                        case CellType.GrandTotal:
                            <GrandTotalCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</GrandTotalCell> break;
                        case CellType.GroupHeader:
                            <GroupHeaderCell IsExpanded="@c.Item.IsExpanded" NodeID="@c.Item.NodeID" CanToggleExapansion="@c.Item.CanToggleExapansion" ToggleExpansion="ToggleNodeExpansion" RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</GroupHeaderCell> break;
                        case CellType.TotalHeader:
                            <TotalHeaderCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</TotalHeaderCell> break;
                        case CellType.GrandTotalHeader:
                            <GrandTotalHeaderCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</GrandTotalHeaderCell> break;
                        case CellType.MeasureTotalLabel:
                            <MeasureTotalLabelCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">@c.Item.Value</MeasureTotalLabelCell> break;
                        case CellType.MeasureLabel:
                            <MeasureLabelCell RowSpan="@c.Item.RowSpan" ColSpan="@c.Item.ColSpan" PivotStyle="@PivotStyle">
                                    
                                    
                                @if (row.Index == 0 && c.Index == 0)
                                {
                                    <div class="d-flex flex-column justify-space-between flex-grow-1 flex-fill" Style="height:100%;">

                                        <button hidden="@(!DisplayReloadDataButton)" class="@PivotStyle.ReloadButton" style="width:120px;" @onclick="@(async x => await ReloadData())">
                                            <span class="oi oi-reload" title="Reload Data" aria-hidden="true" style="margin-right:4px;"></span>
                                            Reload Data
                                        </button>

                                        <div hidden="@(!DisplayMeasureSelectors)" class="mt-2 flex-column">

                                            @foreach (var measure in Measures)
                                            {
                                                <div class="d-flex">
                                                    <label class="switch mb-1">
                                                        <input type="checkbox" checked="@(measure.IsEnabled)" @onchange="@(x => MeasureCheckedChanged(measure, x))" />
                                                        <span class="@PivotStyle.CheckBox"></span>
                                                        <label class="@PivotStyle.CheckBoxLabel">@measure.DisplayValue</label>
                                                    </label>
                                                </div>
                                            }
                                        </div>

                                        <div hidden="@(!DisplayGrandTotalOption)" class="flex-row">
                                            <label  class="switch mb-1 w-100" >
                                                <input type="checkbox" checked="@(DisplayGrandTotals)" @onchange="@(x => GrandTotalsCheckedChanged())" />
                                                <span class="@PivotStyle.CheckBox"></span>
                                                <label class="@PivotStyle.CheckBoxLabel">Grand Totals</label>
                                            </label>
                                        </div>
                                    
                                        @if (DisplayDimensionButtons)
                                        {
                                            <div class="d-flex mt-auto" >
                                                <DimensionContainer T="T" Dimensions="RowDimensions" RenderTable="RenderTable" DimensionsChanged="DimensionsChanged"  MaxDimensions="MaxDimensionsPerAxis" IsRows="true" PivotStyle="@PivotStyle"></DimensionContainer>
                                            </div>
                                        }
                                    </div>
                                }
                                else if (row.Index == 0 && c.Index == 1 && DisplayDimensionButtons)
                                {
                                    <div class="d-flex align-self-center" style="margin-top:-1vh;">
                                        <DimensionContainer T="T" Dimensions="ColumnDimensions" RenderTable="RenderTable" DimensionsChanged="DimensionsChanged" MaxDimensions="MaxDimensionsPerAxis" IsRows="false" PivotStyle="@PivotStyle"></DimensionContainer>  
                                    </div>
                                }
                                else
                                {
                                    @c.Item.Value;
                                }

                            </MeasureLabelCell> break;
                        default:
                            throw new Exception($"CellType {c.Item.CellType.ToString()} is not recognized.");
                    }
                }
                </Tr>
            }
        }
    </table>
</div>



