@namespace LeaderPivot.Blazor
@using LeaderAnalytics.LeaderPivot
@typeparam T

       
<div Class="d-flex flex-row flex-wrap">

    @foreach (Dimension<T> dim in Dimensions)
    {
        Dimension<T> tmpDim = dim;

        <button class="@PivotStyle.DimensionButton" style="min-width:120px;margin-right:1vw;margin-top:1vw;" @onclick="@(x => DimensionClicked(tmpDim.DisplayValue))">
            @if (tmpDim.IsAscending)
            {
                <span class="oi oi-caret-top" title="Sort ascending" aria-hidden="true" style="margin-right:4px;"></span>
            }
            else
            {
                <span class="oi oi-caret-bottom" title="Sort descending" aria-hidden="true" style="margin-right:4px;"></span>
            }
            @tmpDim.DisplayValue
        </button>
    }
</div>

@code {

    [Parameter] public IEnumerable<Dimension<T>> Dimensions { get; set; }
    [Parameter] public EventCallback<IEnumerable<Dimension<T>>> DimensionsChanged { get; set; }
    [Parameter] public EventCallback RenderTable { get; set; }
    [Parameter] public LeaderPivotStyle PivotStyle { get; set; }

    public DimensionContainer()
    {
        Dimensions = new List<Dimension<T>>();
    }

    public async Task DimensionClicked(string id)
    {
        Dimension<T> dim = Dimensions.First(x => x.DisplayValue == id);
        dim.IsAscending = !dim.IsAscending;
        await DimensionsChanged.InvokeAsync(Dimensions);
        await RenderTable.InvokeAsync(null);
    }
}
